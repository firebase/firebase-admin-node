"""
✨ `Email_KeyOutput` returns the primary key fields of table type `Email`.

It has the same format as `Email_Key`, but is only used as mutation return value.
"""
scalar Email_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ Generated data input type for table 'Email'. It includes all necessary fields for creating or upserting rows into table.
"""
input Email_Data {
  """
  ✨ Generated from Field `Email`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Email`.`id` of type `String!`)
  """
  id_expr: String_Expr
  """
  ✨ Generated from Field `Email`.`fromId` of type `String!`
  """
  fromId: String
  """
  ✨ `_expr` server value variant of `fromId` (✨ Generated from Field `Email`.`fromId` of type `String!`)
  """
  fromId_expr: String_Expr
  """
  ✨ Generated from Field `Email`.`from` of type `User!`
  """
  from: User_Key
  """
  ✨ Generated from Field `Email`.`date` of type `Date!`
  """
  date: Date
  """
  ✨ `_date` server value variant of `date` (✨ Generated from Field `Email`.`date` of type `Date!`)
  """
  date_date: Date_Relative
  """
  ✨ `_expr` server value variant of `date` (✨ Generated from Field `Email`.`date` of type `Date!`)
  """
  date_expr: Date_Expr
  """
  ✨ `_update` server value variant of `date` (✨ Generated from Field `Email`.`date` of type `Date!`)
  """
  date_update: [Date_Update!]
  """
  ✨ Generated from Field `Email`.`subject` of type `String!`
  """
  subject: String
  """
  ✨ `_expr` server value variant of `subject` (✨ Generated from Field `Email`.`subject` of type `String!`)
  """
  subject_expr: String_Expr
  """
  ✨ Generated from Field `Email`.`text` of type `String!`
  """
  text: String
  """
  ✨ `_expr` server value variant of `text` (✨ Generated from Field `Email`.`text` of type `String!`)
  """
  text_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Email'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Email_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Email_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Email_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Email_Filter!]
  """
  ✨ Generated from Field `Email`.`id` of type `String!`
  """
  id: String_Filter
  """
  ✨ Generated from Field `Email`.`fromId` of type `String!`
  """
  fromId: String_Filter
  """
  ✨ Generated from Field `Email`.`from` of type `User!`
  """
  from: User_Filter
  """
  ✨ Generated from Field `Email`.`date` of type `Date!`
  """
  date: Date_Filter
  """
  ✨ Generated from Field `Email`.`subject` of type `String!`
  """
  subject: String_Filter
  """
  ✨ Generated from Field `Email`.`text` of type `String!`
  """
  text: String_Filter
}
"""
✨ Generated first-row input type for table 'Email'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Email_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Email_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Email_Filter
}
"""
✨ Generated having input type for table 'Email'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Email_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Email_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Email_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Email_Having!]
  """
  ✨ Generated from Field `Email`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Email`.`date_count` of type `Int!`
  """
  date_count: Int_Filter
  """
  ✨ Generated from Field `Email`.`fromId_count` of type `Int!`
  """
  fromId_count: Int_Filter
  """
  ✨ Generated from Field `Email`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Email`.`subject_count` of type `Int!`
  """
  subject_count: Int_Filter
  """
  ✨ Generated from Field `Email`.`text_count` of type `Int!`
  """
  text_count: Int_Filter
  """
  ✨ Generated from Field `Email`.`date_min` of type `Date`
  """
  date_min: Date_Filter
  """
  ✨ Generated from Field `Email`.`date_max` of type `Date`
  """
  date_max: Date_Filter
}
"""
✨ Generated key input type for table 'Email'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Email_Key {
  """
  ✨ Generated from Field `Email`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Email`.`id` of type `String!`)
  """
  id_expr: String_Expr
}
"""
✨ Generated list filter input type for table 'Email'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Email_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Email_Filter
}
"""
✨ Generated order input type for table 'Email'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Email_Order {
  """
  ✨ Generated from Field `Email`.`id` of type `String!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Email`.`fromId` of type `String!`
  """
  fromId: OrderDirection
  """
  ✨ Generated from Field `Email`.`from` of type `User!`
  """
  from: User_Order
  """
  ✨ Generated from Field `Email`.`date` of type `Date!`
  """
  date: OrderDirection
  """
  ✨ Generated from Field `Email`.`subject` of type `String!`
  """
  subject: OrderDirection
  """
  ✨ Generated from Field `Email`.`text` of type `String!`
  """
  text: OrderDirection
  """
  ✨ Generated from Field `Email`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `Email`.`date_count` of type `Int!`
  """
  date_count: OrderDirection
  """
  ✨ Generated from Field `Email`.`fromId_count` of type `Int!`
  """
  fromId_count: OrderDirection
  """
  ✨ Generated from Field `Email`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `Email`.`subject_count` of type `Int!`
  """
  subject_count: OrderDirection
  """
  ✨ Generated from Field `Email`.`text_count` of type `Int!`
  """
  text_count: OrderDirection
  """
  ✨ Generated from Field `Email`.`date_min` of type `Date`
  """
  date_min: OrderDirection
  """
  ✨ Generated from Field `Email`.`date_max` of type `Date`
  """
  date_max: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `String!`)
  """
  id_expr: String_Expr
  """
  ✨ Generated from Field `User`.`address` of type `String!`
  """
  address: String
  """
  ✨ `_expr` server value variant of `address` (✨ Generated from Field `User`.`address` of type `String!`)
  """
  address_expr: String_Expr
  """
  ✨ Generated from Field `User`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `User`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String_Filter
  """
  ✨ Generated from Field `User`.`address` of type `String!`
  """
  address: String_Filter
  """
  ✨ Generated from Field `User`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `User`.`emails_on_from` of type `[Email!]!`
  """
  emails_on_from: Email_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated having input type for table 'User'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [User_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: User_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [User_Having!]
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `User`.`address_count` of type `Int!`
  """
  address_count: Int_Filter
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `User`.`name_count` of type `Int!`
  """
  name_count: Int_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `String!`)
  """
  id_expr: String_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`address` of type `String!`
  """
  address: OrderDirection
  """
  ✨ Generated from Field `User`.`name` of type `String!`
  """
  name: OrderDirection
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `User`.`address_count` of type `Int!`
  """
  address_count: OrderDirection
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `User`.`name_count` of type `Int!`
  """
  name_count: OrderDirection
}
